# Reagraph

> Reagraph is a high-performance WebGL-based network graph visualization library for React. It provides 2D and 3D graph rendering capabilities with support for large datasets, interactive features, and customizable themes.

## Overview

Reagraph is designed for building interactive network visualizations in React applications. Key features include:

- WebGL rendering for high performance with large graphs
- Support for both 2D and 3D layouts
- Multiple layout algorithms (force-directed, hierarchical, circular, etc.)
- Node and edge customization
- Clustering and collapsing capabilities
- Camera controls and animations
- Light and dark themes with full customization
- Selection and interaction handling
- Path finding between nodes

## Installation

```bash
npm install reagraph
# or
yarn add reagraph
```

## Basic Usage

```tsx
import { GraphCanvas } from 'reagraph';

const MyGraph = () => {
  const nodes = [
    { id: '1', label: 'Node 1' },
    { id: '2', label: 'Node 2' }
  ];
  
  const edges = [
    { id: '1-2', source: '1', target: '2', label: 'Edge 1-2' }
  ];

  return (
    <GraphCanvas
      nodes={nodes}
      edges={edges}
      layoutType="forceDirected2d"
    />
  );
};
```

## Core Components

### GraphCanvas

The main component for rendering graphs. Combines the 3D canvas, camera controls, and graph scene.

**Key Props:**
- `nodes` (required): Array of GraphNode objects
- `edges` (required): Array of GraphEdge objects
- `layoutType`: Layout algorithm ('forceDirected2d', 'forceDirected3d', 'hierarchicalTd', 'hierarchicalBu', 'hierarchicalLr', 'hierarchicalRl', 'circular2d', 'circular3d', 'nooverlap', 'forceAtlas2')
- `theme`: Theme object for customizing colors and styles
- `cameraMode`: Camera interaction mode ('pan', 'rotate', 'orbit')
- `sizingType`: Node sizing strategy ('none', 'attribute', 'centrality', 'pagerank')
- `labelType`: Label visibility ('auto', 'all', 'nodes', 'edges', 'none')
- `animated`: Enable/disable animations
- `selections`: Array of selected node/edge IDs
- `actives`: Array of active (hovered) node/edge IDs
- `collapsedNodeIds`: Array of collapsed node IDs

**Event Handlers:**
- `onNodeClick`: Fired when a node is clicked
- `onNodeDoubleClick`: Fired when a node is double-clicked
- `onNodePointerOver`: Fired when pointer hovers over a node
- `onNodePointerOut`: Fired when pointer leaves a node
- `onNodeDrag`: Fired when a node is dragged
- `onNodeDragStart`: Fired when node dragging starts
- `onNodeDragEnd`: Fired when node dragging ends
- `onEdgeClick`: Fired when an edge is clicked
- `onEdgeDoubleClick`: Fired when an edge is double-clicked
- `onEdgePointerOver`: Fired when pointer hovers over an edge
- `onEdgePointerOut`: Fired when pointer leaves an edge
- `onCanvasClick`: Fired when canvas is clicked (not on node/edge)
- `onLasso`: Fired during lasso selection
- `onLassoEnd`: Fired when lasso selection ends

### GraphScene

Lower-level component for rendering the graph scene without canvas wrapper. Useful for advanced customization.

## Data Structures

### GraphNode

```typescript
interface GraphNode {
  id: string;              // Unique identifier
  label?: string;          // Display label
  subLabel?: string;       // Secondary label
  size?: number;           // Node size
  fill?: string;           // Fill color
  icon?: string;           // Icon URL
  cluster?: string;        // Cluster ID
  parents?: string[];      // Parent node IDs
  labelVisible?: boolean;  // Force label visibility
  data?: any;             // Custom data
}
```

### GraphEdge

```typescript
interface GraphEdge {
  id: string;              // Unique identifier
  source: string;          // Source node ID
  target: string;          // Target node ID
  label?: string;          // Display label
  subLabel?: string;       // Secondary label
  size?: number;           // Edge width
  fill?: string;           // Edge color
  labelVisible?: boolean;  // Force label visibility
  subLabelPlacement?: 'below' | 'above';  // SubLabel position
  data?: any;             // Custom data
}
```

## Layout Types

- `forceDirected2d`: 2D force-directed layout
- `forceDirected3d`: 3D force-directed layout
- `hierarchicalTd`: Hierarchical top-down
- `hierarchicalBu`: Hierarchical bottom-up
- `hierarchicalLr`: Hierarchical left-right
- `hierarchicalRl`: Hierarchical right-left
- `circular2d`: 2D circular layout
- `circular3d`: 3D circular layout
- `nooverlap`: No overlap layout
- `forceAtlas2`: ForceAtlas2 algorithm
- `custom`: Custom layout function

## Sizing Types

- `none`: All nodes same size
- `attribute`: Size based on node.size property
- `centrality`: Size based on centrality
- `pagerank`: Size based on PageRank algorithm

## Theme Customization

```typescript
interface Theme {
  canvas: {
    background: string;
    fog: string;
  };
  node: {
    fill: string;
    activeFill: string;
    opacity: number;
    selectedOpacity: number;
    inactiveOpacity: number;
    label: {
      color: string;
      stroke: string;
      activeColor: string;
    };
    subLabel: {
      color: string;
      stroke: string;
      activeColor: string;
    };
  };
  edge: {
    fill: string;
    activeFill: string;
    opacity: number;
    selectedOpacity: number;
    inactiveOpacity: number;
    label: {
      color: string;
      stroke: string;
      activeColor: string;
    };
  };
  arrow: {
    fill: string;
    activeFill: string;
  };
  cluster: {
    fill: string;
    stroke: string;
    label: {
      stroke: string;
      color: string;
    };
  };
}
```

## Advanced Features

### Camera Controls

Control camera behavior and positioning:

```tsx
const graphRef = useRef<GraphCanvasRef>();

// Center the graph
graphRef.current?.centerGraph();

// Zoom to specific nodes
graphRef.current?.zoomToNodes(['node1', 'node2']);

// Pan to position
graphRef.current?.panToPosition({ x: 100, y: 100, z: 0 });

// Set zoom level
graphRef.current?.setZoom(1.5);
```

### Selection

Handle single and multi-selection:

```tsx
<GraphCanvas
  nodes={nodes}
  edges={edges}
  selections={['node1', 'edge1']}
  onNodeClick={(node) => {
    // Handle selection
  }}
  lassoType="node"  // 'node' or 'all'
  onLassoEnd={(selections) => {
    // Handle lasso selection
  }}
/>
```

### Clustering

Group nodes into clusters:

```tsx
const nodes = [
  { id: '1', label: 'Node 1', cluster: 'cluster1' },
  { id: '2', label: 'Node 2', cluster: 'cluster1' },
  { id: '3', label: 'Node 3', cluster: 'cluster2' }
];

<GraphCanvas
  nodes={nodes}
  edges={edges}
  clusterAttribute="cluster"
/>
```

### Context Menu

Add custom context menus:

```tsx
<GraphCanvas
  nodes={nodes}
  edges={edges}
  contextMenu={({ data, onClose }) => (
    <div className="context-menu">
      <button onClick={() => {
        console.log('Node:', data);
        onClose();
      }}>
        View Details
      </button>
    </div>
  )}
/>
```

### Custom Nodes

Create custom node renderers:

```tsx
const customNodeRenderer = ({ node, color, size }) => (
  <mesh position={[node.position.x, node.position.y, node.position.z]}>
    <boxGeometry args={[size, size, size]} />
    <meshBasicMaterial color={color} />
  </mesh>
);

<GraphCanvas
  nodes={nodes}
  edges={edges}
  renderNode={customNodeRenderer}
/>
```

### Animation

Control animations:

```tsx
<GraphCanvas
  nodes={nodes}
  edges={edges}
  animated={true}
  draggable={true}
  edgeArrowPosition="end"
  edgeInterpolation="curved"
/>
```

### Layout Configuration

Use layout recommendation or custom layouts:

```tsx
// Automatic layout recommendation
import { recommendLayout } from 'reagraph';

const layout = recommendLayout(nodes, edges);
<GraphCanvas layoutType={layout} nodes={nodes} edges={edges} />

// Custom layout with overrides
<GraphCanvas
  layoutType="forceDirected2d"
  layoutOverrides={{
    nodeStrength: -50,
    linkDistance: 500
  }}
  nodes={nodes}
  edges={edges}
/>

// Fully custom layout
<GraphCanvas
  layoutType="custom"
  layoutOverrides={{
    getNodePosition: (id, { nodes }) => {
      const idx = nodes.findIndex(n => n.id === id);
      return {
        x: 25 * idx,
        y: idx % 2 === 0 ? 0 : 50,
        z: 1
      };
    }
  }}
  nodes={nodes}
  edges={edges}
/>
```

### Radial Menu

Add interactive radial menus:

```tsx
import { RadialMenu } from 'reagraph';

<GraphCanvas
  nodes={nodes}
  edges={edges}
  contextMenu={({ data, onClose }) => (
    <RadialMenu
      onClose={onClose}
      items={[
        {
          label: 'View Details',
          onClick: () => console.log('Details:', data)
        },
        {
          label: 'Delete',
          onClick: () => removeNode(data.id)
        }
      ]}
    />
  )}
/>
```

## Performance Optimization

For large graphs:

1. Use appropriate layout algorithms (forceAtlas2 for large graphs)
2. Implement node/edge filtering
3. Use clustering to group related nodes
4. Limit label visibility with labelType
5. Disable animations for very large datasets
6. Use sizingType='none' for uniform node sizes

## Common Patterns

### Dynamic Graph Updates

```tsx
const [nodes, setNodes] = useState(initialNodes);
const [edges, setEdges] = useState(initialEdges);

// Add node
const addNode = (node) => {
  setNodes([...nodes, node]);
};

// Update node
const updateNode = (id, updates) => {
  setNodes(nodes.map(n => 
    n.id === id ? { ...n, ...updates } : n
  ));
};

// Remove node
const removeNode = (id) => {
  setNodes(nodes.filter(n => n.id !== id));
  setEdges(edges.filter(e => 
    e.source !== id && e.target !== id
  ));
};
```

### Path Finding

Find paths between nodes:

```tsx
import { useGraph } from 'reagraph';

const MyGraph = () => {
  const graphRef = useRef<GraphCanvasRef>();
  
  const findPath = () => {
    const graph = graphRef.current?.getGraph();
    // Use graph methods for pathfinding
  };
  
  return <GraphCanvas ref={graphRef} {...props} />;
};
```

## TypeScript Support

Reagraph is written in TypeScript and provides full type definitions. Import types as needed:

```typescript
import type {
  GraphNode,
  GraphEdge,
  GraphCanvasRef,
  Theme,
  LayoutTypes,
  SizingType,
  NodeRenderer,
  ClusterRenderer
} from 'reagraph';
```

## Browser Support

Reagraph requires WebGL support. It works in all modern browsers:
- Chrome/Edge (latest)
- Firefox (latest)
- Safari (latest)

## License

Apache License 2.0

## Links

- GitHub: https://github.com/reaviz/reagraph
- Documentation: https://reagraph.dev
- NPM: https://www.npmjs.com/package/reagraph
- Examples: https://reagraph.dev/?path=/story/docs-getting-started-installing--docs