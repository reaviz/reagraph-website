# Reagraph

> WebGL Node-based Graph for React. Version: 4.24.2

## Overview

Reagraph is designed for building interactive network visualizations in React applications. Key features include:

- WebGL rendering for high performance with large graphs
- Support for both 2D and 3D layouts
- Multiple layout algorithms (force-directed, hierarchical, circular, etc.)
- Node and edge customization
- Clustering and collapsing capabilities
- Camera controls and animations
- Light and dark themes with full customization
- Selection and interaction handling
- Path finding between nodes

## Installation

```bash
npm install reagraph
# or
yarn add reagraph
```

## Basic Usage

```tsx
import { GraphCanvas } from 'reagraph';

const MyGraph = () => {
  const nodes = [
    { id: '1', label: 'Node 1' },
    { id: '2', label: 'Node 2' }
  ];
  
  const edges = [
    { id: '1-2', source: '1', target: '2', label: 'Edge 1-2' }
  ];

  return (
    <GraphCanvas
      nodes={nodes}
      edges={edges}
      layoutType="forceDirected2d"
    />
  );
};
```

## Core Components

### GraphCanvas

Component for GraphCanvas

**Props:**
- `theme`: Theme to use for the graph. - Type: `Theme` = {
  canvas: { background: '#fff' },
  node: {
    fill: '#7CA0AB',
    activeFill: '#1DE9AC',
    opacity: 1,
    selectedOpacity: 1,
    inactiveOpacity: 0.2,
    label: { color: '#2A6475', stroke: '#fff', activeColor: '#1DE9AC' },
    subLabel: { color: '#ddd', stroke: 'transparent', activeColor: '#1DE9AC' }
  },
  lasso: { border: '1px solid #55aaff', background: 'rgba(75, 160, 255, 0.1)' },
  ring: { fill: '#D8E6EA', activeFill: '#1DE9AC' },
  edge: {
    fill: '#D8E6EA',
    activeFill: '#1DE9AC',
    opacity: 1,
    selectedOpacity: 1,
    inactiveOpacity: 0.1,
    label: {
      stroke: '#fff',
      color: '#2A6475',
      activeColor: '#1DE9AC',
      fontSize: 6
    },
    subLabel: {
      color: '#ddd',
      stroke: 'transparent',
      activeColor: '#1DE9AC'
    }
  },
  arrow: { fill: '#D8E6EA', activeFill: '#1DE9AC' },
  cluster: {
    stroke: '#D8E6EA',
    opacity: 1,
    selectedOpacity: 1,
    inactiveOpacity: 0.1,
    label: { stroke: '#fff', color: '#2A6475' }
  }
}
- `cameraMode`: Type of camera interaction. - Type: `CameraMode` = pan
- `maxDistance`: The maximum distance for the camera. Default is 50000. - Type: `number`
- `minDistance`: The minimum distance for the camera. Default is 1000. - Type: `number`
- `lassoType`: The type of lasso selection. - Type: `LassoType` = none
- `children`: Children to render in the canvas. Useful for things like lights. - Type: `ReactNode`
- `glOptions`: Ability to extend Cavas gl options. For example { preserveDrawingBuffer: true } - Type: `Object` = {}
- `onLasso`: When the canvas had a lasso selection. - Type: `(selections: string[]) => void`
- `onLassoEnd`: When the canvas had a lasso selection end. - Type: `(selections: string[]) => void`
- `onCanvasClick`: When the canvas was clicked but didn't hit a node/edge. - Type: `(event: MouseEvent) => void`
- `layoutType`: Type of layout. - Type: `LayoutTypes` = forceDirected2d
- `selections`: List of ids that are selected. - Type: `string[]`
- `actives`: List of ids that are active. - Type: `string[]`
- `collapsedNodeIds`: List of node ids that are collapsed. - Type: `string[]`
- `animated`: Animate or not the graph positions. - Type: `boolean` = true
- `nodes` (required): Nodes to pass to the graph. - Type: `GraphNode[]`
- `edges` (required): Edges to pass to the graph. - Type: `GraphEdge[]`
- `contextMenu`: Context menu element. - Type: `(event: ContextMenuEvent) => ReactNode`
- `sizingType`: Type of sizing for nodes. - Type: `SizingType` = default
- `labelType`: Type of visibility for labels. - Type: `LabelVisibilityType` = auto
- `edgeLabelPosition`: Place of visibility for edge labels. - Type: `EdgeLabelPosition`
- `edgeArrowPosition`: Placement of edge arrows. - Type: `EdgeArrowPosition`
- `edgeInterpolation`: Shape of edge. - Type: `EdgeInterpolation`
- `labelFontUrl`: Font of label, same as troika-three-text
The URL of a custom font file to be used. Supported font formats are: * .ttf * .otf * .woff (.woff2 is not supported)
Default: The Roboto font loaded from Google Fonts CDN - Type: `string`
- `sizingAttribute`: Attribute based sizing property. - Type: `string`
- `defaultNodeSize`: The default size to size nodes to. Default is 7. - Type: `number` = 7
- `minNodeSize`: When using sizing attributes, the min size a node can be. - Type: `number` = 5
- `maxNodeSize`: When using sizing attributes, the max size a node can be. - Type: `number` = 15
- `clusterAttribute`: Attribute used for clustering. - Type: `string`
- `disabled`: Disable interactions or not. - Type: `boolean`
- `draggable`: Allow dragging of nodes. - Type: `boolean`
- `constrainDragging`: Constrain dragging to the cluster bounds. Default is `false`. - Type: `boolean`
- `renderNode`: Render a custom node - Type: `NodeRenderer`
- `onRenderCluster`: Render a custom cluster - Type: `ClusterRenderer`
- `layoutOverrides`: Advanced overrides for the layout. - Type: `LayoutOverrides`
- `onNodeClick`: When a node was clicked. - Type: `(node: InternalGraphNode, props?: CollapseProps, event?: ThreeEvent<MouseEvent>) => void`
- `onNodeDoubleClick`: When a node was double clicked. - Type: `(node: InternalGraphNode, event: ThreeEvent<MouseEvent>) => void`
- `onNodeContextMenu`: When a node context menu happened. - Type: `(node: InternalGraphNode, props?: NodeContextMenuProps) => void`
- `onNodePointerOver`: When node got a pointer over. - Type: `(node: InternalGraphNode, event: ThreeEvent<PointerEvent>) => void`
- `onNodePointerOut`: When node lost pointer over. - Type: `(node: InternalGraphNode, event: ThreeEvent<PointerEvent>) => void`
- `onNodeDragged`: Triggered after a node was dragged. - Type: `(node: InternalGraphNode) => void`
- `onClusterDragged`: Triggered after a cluster was dragged. - Type: `(cluster: ClusterEventArgs) => void`
- `onEdgeContextMenu`: When a edge context menu happened. - Type: `(edge?: InternalGraphEdge) => void`
- `onEdgeClick`: When an edge was clicked. - Type: `(edge: InternalGraphEdge, event?: ThreeEvent<MouseEvent>) => void`
- `onEdgePointerOver`: When edge got a pointer over. - Type: `(edge: InternalGraphEdge, event?: ThreeEvent<PointerEvent>) => void`
- `onEdgePointerOut`: When edge lost pointer over. - Type: `(edge: InternalGraphEdge, event?: ThreeEvent<PointerEvent>) => void`
- `onClusterClick`: When a cluster was clicked. - Type: `(cluster: ClusterEventArgs, event: ThreeEvent<MouseEvent>) => void`
- `onClusterPointerOver`: When a cluster receives a pointer over event. - Type: `(cluster: ClusterEventArgs, event: ThreeEvent<PointerEvent>) => void`
- `onClusterPointerOut`: When cluster receives a pointer leave event. - Type: `(cluster: ClusterEventArgs, event: ThreeEvent<PointerEvent>) => void`
- `ref`: No description - Type: `Ref<GraphCanvasRef>`

### GraphScene

Component for GraphScene

**Props:**
- `layoutType`: Type of layout. - Type: `LayoutTypes`
- `selections`: List of ids that are selected. - Type: `string[]`
- `actives`: List of ids that are active. - Type: `string[]`
- `collapsedNodeIds`: List of node ids that are collapsed. - Type: `string[]`
- `animated`: Animate or not the graph positions. - Type: `boolean`
- `nodes` (required): Nodes to pass to the graph. - Type: `GraphNode[]`
- `edges` (required): Edges to pass to the graph. - Type: `GraphEdge[]`
- `contextMenu`: Context menu element. - Type: `(event: ContextMenuEvent) => ReactNode`
- `sizingType`: Type of sizing for nodes. - Type: `SizingType`
- `labelType`: Type of visibility for labels. - Type: `LabelVisibilityType`
- `edgeLabelPosition`: Place of visibility for edge labels. - Type: `EdgeLabelPosition`
- `edgeArrowPosition`: Placement of edge arrows. - Type: `EdgeArrowPosition`
- `edgeInterpolation`: Shape of edge. - Type: `EdgeInterpolation` = linear
- `labelFontUrl`: Font of label, same as troika-three-text
The URL of a custom font file to be used. Supported font formats are: * .ttf * .otf * .woff (.woff2 is not supported)
Default: The Roboto font loaded from Google Fonts CDN - Type: `string`
- `sizingAttribute`: Attribute based sizing property. - Type: `string`
- `defaultNodeSize`: The default size to size nodes to. Default is 7. - Type: `number`
- `minNodeSize`: When using sizing attributes, the min size a node can be. - Type: `number`
- `maxNodeSize`: When using sizing attributes, the max size a node can be. - Type: `number`
- `clusterAttribute`: Attribute used for clustering. - Type: `string`
- `disabled`: Disable interactions or not. - Type: `boolean`
- `draggable`: Allow dragging of nodes. - Type: `boolean`
- `constrainDragging`: Constrain dragging to the cluster bounds. Default is `false`. - Type: `boolean` = false
- `renderNode`: Render a custom node - Type: `NodeRenderer`
- `onRenderCluster`: Render a custom cluster - Type: `ClusterRenderer`
- `layoutOverrides`: Advanced overrides for the layout. - Type: `LayoutOverrides`
- `onNodeClick`: When a node was clicked. - Type: `(node: InternalGraphNode, props?: CollapseProps, event?: ThreeEvent<MouseEvent>) => void`
- `onNodeDoubleClick`: When a node was double clicked. - Type: `(node: InternalGraphNode, event: ThreeEvent<MouseEvent>) => void`
- `onNodeContextMenu`: When a node context menu happened. - Type: `(node: InternalGraphNode, props?: NodeContextMenuProps) => void`
- `onNodePointerOver`: When node got a pointer over. - Type: `(node: InternalGraphNode, event: ThreeEvent<PointerEvent>) => void`
- `onNodePointerOut`: When node lost pointer over. - Type: `(node: InternalGraphNode, event: ThreeEvent<PointerEvent>) => void`
- `onNodeDragged`: Triggered after a node was dragged. - Type: `(node: InternalGraphNode) => void`
- `onClusterDragged`: Triggered after a cluster was dragged. - Type: `(cluster: ClusterEventArgs) => void`
- `onEdgeContextMenu`: When a edge context menu happened. - Type: `(edge?: InternalGraphEdge) => void`
- `onEdgeClick`: When an edge was clicked. - Type: `(edge: InternalGraphEdge, event?: ThreeEvent<MouseEvent>) => void`
- `onEdgePointerOver`: When edge got a pointer over. - Type: `(edge: InternalGraphEdge, event?: ThreeEvent<PointerEvent>) => void`
- `onEdgePointerOut`: When edge lost pointer over. - Type: `(edge: InternalGraphEdge, event?: ThreeEvent<PointerEvent>) => void`
- `onClusterClick`: When a cluster was clicked. - Type: `(cluster: ClusterEventArgs, event: ThreeEvent<MouseEvent>) => void`
- `onClusterPointerOver`: When a cluster receives a pointer over event. - Type: `(cluster: ClusterEventArgs, event: ThreeEvent<PointerEvent>) => void`
- `onClusterPointerOut`: When cluster receives a pointer leave event. - Type: `(cluster: ClusterEventArgs, event: ThreeEvent<PointerEvent>) => void`
- `ref`: No description - Type: `Ref<GraphSceneRef>`

### CameraControls

Component for CameraControls

**Props:**
- `mode`: Mode of the camera. - Type: `CameraMode` = rotate
- `children`: Children symbols. - Type: `ReactNode`
- `animated`: Animate transitions to centering. - Type: `boolean`
- `disabled`: Whether the controls are enabled. - Type: `boolean`
- `maxDistance`: The maximum distance for the camera. - Type: `number` = 50000
- `minDistance`: The minimum distance for the camera. - Type: `number` = 1000
- `ref`: No description - Type: `Ref<CameraControlsContextProps>`

## Data Structures

### GraphNode

```typescript
interface GraphNode {
  id: string;              // Unique identifier
  label?: string;          // Display label
  subLabel?: string;       // Secondary label
  size?: number;           // Node size
  fill?: string;           // Fill color
  icon?: string;           // Icon URL
  cluster?: string;        // Cluster ID
  parents?: string[];      // Parent node IDs
  labelVisible?: boolean;  // Force label visibility
  data?: any;             // Custom data
}
```

### GraphEdge

```typescript
interface GraphEdge {
  id: string;              // Unique identifier
  source: string;          // Source node ID
  target: string;          // Target node ID
  label?: string;          // Display label
  subLabel?: string;       // Secondary label
  size?: number;           // Edge width
  fill?: string;           // Edge color
  labelVisible?: boolean;  // Force label visibility
  subLabelPlacement?: 'below' | 'above';  // SubLabel position
  data?: any;             // Custom data
}
```

## Layout Types

- `forceDirected2d`: 2D force-directed layout
- `forceDirected3d`: 3D force-directed layout
- `hierarchicalTd`: Hierarchical top-down
- `hierarchicalBu`: Hierarchical bottom-up
- `hierarchicalLr`: Hierarchical left-right
- `hierarchicalRl`: Hierarchical right-left
- `circular2d`: 2D circular layout
- `circular3d`: 3D circular layout
- `nooverlap`: No overlap layout
- `forceAtlas2`: ForceAtlas2 algorithm
- `custom`: Custom layout function

## Advanced Examples

### Camera Controls

```tsx
const graphRef = useRef<GraphCanvasRef>();

// Center the graph
graphRef.current?.centerGraph();

// Zoom to specific nodes
graphRef.current?.zoomToNodes(['node1', 'node2']);
```

### Custom Node Renderer

```tsx
const customNodeRenderer = ({ node, color, size }) => (
  <mesh position={[node.position.x, node.position.y, node.position.z]}>
    <boxGeometry args={[size, size, size]} />
    <meshBasicMaterial color={color} />
  </mesh>
);

<GraphCanvas
  nodes={nodes}
  edges={edges}
  renderNode={customNodeRenderer}
/>
```

### Dynamic Updates

```tsx
const [nodes, setNodes] = useState(initialNodes);

// Add node
setNodes([...nodes, { id: 'new', label: 'New Node' }]);

// Update node
setNodes(nodes.map(n => 
  n.id === 'node1' ? { ...n, fill: 'red' } : n
));
```

## Performance Tips

1. Use appropriate layout algorithms (forceAtlas2 for large graphs)
2. Implement node/edge filtering for large datasets
3. Use clustering to group related nodes
4. Limit label visibility with labelType
5. Disable animations for very large datasets

## Links

- GitHub: https://github.com/reaviz/reagraph
- Documentation: https://reagraph.dev
- NPM: https://www.npmjs.com/package/reagraph
- License: Apache-2.0
